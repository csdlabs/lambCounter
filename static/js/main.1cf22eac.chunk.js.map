{"version":3,"sources":["Components/Counter/Counter.module.css","Components/Counter/CounterButton.tsx","Components/Counter/CounterButtons.tsx","Components/Counter/CounterBlock.tsx","Components/Noerror.tsx","Components/Error.tsx","Components/Counter/Counter.tsx","Components/CounterSetter/ValueLine.tsx","Components/CounterSetter/CounterValuesSetter.tsx","Components/CounterSetter/CounterSetter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","CounterButton","name","callback","disabled","onClick","className","classes","button","CounterButtons","incCounter","resetCounter","counter","maxValue","error","buttons","CounterBlock","text","Noerror","Error","Counter","startValue","setError","ValueLine","getInputValue","value","type","onChange","e","inputValue","currentTarget","CounterValuesSetter","getStartInputValue","getMaxInputValue","starValue","CounterSetter","setCounterValue","App","React","useState","setCounter","setMaxvalue","setStartValue","setDisabled","useEffect","valueAsString","localStorage","getItem","newValue","JSON","parse","setItem","stringify","startValueAsString","maxValueAsString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,KAAO,sBAAsB,QAAU,yBAAyB,OAAS,wBAAwB,MAAQ,yB,kKCoB3GC,EAXM,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,KAAKC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,SAMnC,OACI,wBAAQA,SAAUA,EAAUC,QALT,WACnBF,KAIqDG,UAAWC,IAAQC,OAAxE,SAAiFN,KCMzEO,EATO,SAAC,GAAiF,IAAhFC,EAA+E,EAA/EA,WAAWC,EAAoE,EAApEA,aAAcC,EAAsD,EAAtDA,QAASC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,MACjE,OACI,sBAAKR,UAAWC,IAAQQ,QAAxB,UACI,cAAC,EAAD,CAAeX,SAAUQ,IAAYC,GAAYC,EAAOZ,KAAM,MAAOC,SAAUO,IAC/E,cAAC,EAAD,CAAeN,SAAsB,IAAZQ,EAAeV,KAAM,QAASC,SAAUQ,QCC9DK,EATM,SAAC,GAA+C,IAA9CJ,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,SAI5B,OACI,mBAAGP,UAAS,UAAKC,IAAQU,KAAb,YAAqBL,IAAYC,EAAWN,IAAQO,MAAQ,IAAxE,SAA+EF,KCExEM,EARC,SAAC,GAA2C,IAA1CN,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,SACvB,OACI,8BACiB,IAAZD,EAAgB,mBAAGN,UAAW,qBAAd,wCAAqE,cAAC,EAAD,CAAcM,QAASA,EAASC,SAAUA,OCF7HM,EARD,WACV,OACI,qBAAKb,UAAW,qBAAhB,SACI,mBAAGA,UAAW,YAAd,iCCkCGc,EArBC,SAAC,GAAkG,IAAjGR,EAAgG,EAAhGA,QAASF,EAAuF,EAAvFA,WAAYC,EAA2E,EAA3EA,aAAcE,EAA6D,EAA7DA,SAAsBC,GAAuC,EAAnDO,WAAmD,EAAvCP,OAAuC,EAAhCQ,SAI9E,OACI,sBAAKhB,UAAW,UAAhB,UAEMQ,EAA2D,cAAC,EAAD,IAAnD,cAAC,EAAD,CAASF,QAASA,EAASC,SAAUA,IAG/C,cAAC,EAAD,CACIH,WAAYA,EACZC,aAAcA,EACdC,QAASA,EACTC,SAAUA,EACVC,MAAOA,QCHRS,EAjBG,SAAC,GAAsE,IAArErB,EAAoE,EAApEA,KAAMsB,EAA8D,EAA9DA,cAAeF,EAA+C,EAA/CA,SAAUR,EAAqC,EAArCA,MAAOW,EAA8B,EAA9BA,MAUtD,OACI,sBAAKnB,UAAW,YAAhB,UACI,4BAAIJ,IACJ,uBAAOuB,MAAOA,EAAOC,KAAK,SAASC,SAXnB,SAACC,GACrB,IAAMC,GAAcD,EAAEE,cAAcL,MACpCD,EAAcK,GACTA,EAAa,GACdP,GAAS,IAOsDhB,UAAYQ,EAAQ,aAAe,SCH/FiB,EAXa,SAAC,GAA+G,IAA9GC,EAA6G,EAA7GA,mBAAoBC,EAAyF,EAAzFA,iBAAkBX,EAAuE,EAAvEA,SAAUR,EAA6D,EAA7DA,MAAOD,EAAsD,EAAtDA,SAAUqB,EAA4C,EAA5CA,UAG3F,OACI,gCACI,cAAC,EAAD,CAAWhC,KAAM,YAAasB,cAAeS,EAAkBX,SAAUA,EAAUR,MAAOA,EAAOW,MAAOZ,IACxG,cAAC,EAAD,CAAWX,KAAM,cAAesB,cAAeQ,EAAoBV,SAAUA,EAAUR,MAAOA,EAAOW,MAAOS,QCezGC,EAZO,SAAC,GAA8I,IAA7IC,EAA4I,EAA5IA,gBAAgBJ,EAA4H,EAA5HA,mBAAoBnB,EAAwG,EAAxGA,SAAUD,EAA8F,EAA9FA,QAAUqB,EAAoF,EAApFA,iBAAkBC,EAAkE,EAAlEA,UAAWpB,EAAuD,EAAvDA,MAAOQ,EAAgD,EAAhDA,SAAUlB,EAAsC,EAAtCA,SAI1H,OACI,sBAAKE,UAAW,UAAhB,UACI,cAAC,EAAD,CAAqB0B,mBAAoBA,EAAoBC,iBAAkBA,EAAkBX,SAAUA,EAAUR,MAAOA,EAAOD,SAAUA,EAAUqB,UAAWA,IAClK,cAAC,EAAD,CAAehC,KAAM,MAAOC,SAAU,WAAKiC,EAAgBxB,IAAWR,SAAWA,QCwI9EiC,MA9Jf,WAAgB,IAAD,EAGiBC,IAAMC,SAAS,GAHhC,mBAGN3B,EAHM,KAGG4B,EAHH,OAKmBF,IAAMC,SAAS,GALlC,mBAKN1B,EALM,KAKI4B,EALJ,OAOuBH,IAAMC,SAAS,GAPtC,mBAONlB,EAPM,KAOMqB,EAPN,OASaJ,IAAMC,UAAS,GAT5B,mBASNzB,EATM,KASCQ,EATD,OAWmBgB,IAAMC,UAAS,GAXlC,mBAWNnC,EAXM,KAWIuC,EAXJ,KAkIX,OArHAC,qBAAW,WACP,IAAIC,EAAgBC,aAAaC,QAAQ,gBACzC,GAAKF,EAAe,CAChB,IAAIG,EAAWC,KAAKC,MAAML,GAC1BL,EAAWQ,MAEhB,IAEHJ,qBAAW,WACPE,aAAaK,QAAQ,eAAgBF,KAAKG,UAAUxC,MACrD,CAACA,IAEJgC,qBAAW,WACP,IAAIS,EAAqBP,aAAaC,QAAQ,cAC9C,GAAKM,EAAoB,CACrB,IAAIL,EAAWC,KAAKC,MAAMG,GAC1BX,EAAcM,MAEnB,IAEHJ,qBAAW,WACPE,aAAaK,QAAQ,aAAcF,KAAKG,UAAU/B,MACnD,CAACA,IAEJuB,qBAAW,WACP,IAAIU,EAAmBR,aAAaC,QAAQ,YAC5C,GAAKO,EAAkB,CACnB,IAAIN,EAAWC,KAAKC,MAAMI,GAC1Bb,EAAYO,MAEjB,IAEHJ,qBAAW,WACPE,aAAaK,QAAQ,WAAYF,KAAKG,UAAUvC,MAClD,CAACA,IAoFC,sBAAKP,UAAU,MAAf,UAGI,cAAC,EAAD,CACI8B,gBArCY,WACpBI,EAAWnB,GACXsB,GAAY,GAERrB,EADCD,IAAeR,IAGVQ,EAAaR,GAGbQ,EAAa,KA6BfW,mBAtFe,SAACP,GACxBiB,EAAcjB,IACdJ,EAAaI,GACI,GAITJ,IAAeR,GAIfQ,EAAaR,GAPjBS,GAAS,GACTqB,GAAY,KAWZrB,GAAS,GACTqB,GAAY,KAsERV,iBAjEa,SAACR,GACtBgB,EAAYhB,IACZZ,EAAWY,GAEI,GAINZ,IAAaQ,GAIZA,EAAaR,GAIbQ,EAAa,GAXnBC,GAAS,GACTqB,GAAY,KAeZrB,GAAS,GACTqB,GAAY,KA4CR9B,SAAUA,EACVqB,UAAWb,EACXT,QAASA,EACTE,MAAOA,EACPQ,SAAUA,EACVlB,SAAUA,IAEd,cAAC,EAAD,CACIQ,QAASA,EACTF,WAzBO,WACXE,EAAUC,GACV2B,EAAW5B,EAAU,IAwBjBD,aAjCS,WACbC,EAAU,GAAKA,GAAWC,GAC1B2B,EAAWnB,IAgCPR,SAAUA,EACVQ,WAAYA,EACZP,MAAOA,EACPQ,SAAUA,QChJXiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1cf22eac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Counter_text__1xCpk\",\"buttons\":\"Counter_buttons__a2Jq1\",\"button\":\"Counter_button__aMw1M\",\"error\":\"Counter_error__K6XST\"};","import React from \"react\";\r\nimport classes from \"./Counter.module.css\";\r\n\r\n\r\ntype CounterButtonPropsType = {\r\n    name: string\r\n    callback: () => void\r\n    disabled: boolean\r\n}\r\n\r\nconst CounterButton = ({name,callback, disabled}:CounterButtonPropsType) => {\r\n\r\n    const onClickHandler = () => {\r\n        callback()\r\n    }\r\n\r\n    return(\r\n        <button disabled={disabled} onClick={onClickHandler} className={classes.button}>{name}</button>\r\n    )\r\n}\r\n\r\nexport default  CounterButton","import React from \"react\";\r\nimport classes from \"./Counter.module.css\";\r\nimport CounterButton from \"./CounterButton\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\n\r\n\r\ntype CounterButtonsPropsType = {\r\n    incCounter: () => void\r\n    resetCounter: () => void\r\n    counter: number\r\n    maxValue: number\r\n    error: boolean\r\n}\r\n\r\nconst CounterButtons = ({incCounter,resetCounter, counter, maxValue, error}:CounterButtonsPropsType) => {\r\n    return(\r\n        <div className={classes.buttons}>\r\n            <CounterButton disabled={counter === maxValue || error} name={'inc'} callback={incCounter}/>\r\n            <CounterButton disabled={counter === 0} name={'reset'} callback={resetCounter}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  CounterButtons","import React from \"react\";\r\nimport classes from \"./Counter.module.css\";\r\n\r\n\r\ntype CounterBlockPropsType = {\r\n    counter: number\r\n    maxValue: number\r\n\r\n}\r\n\r\nconst CounterBlock = ({counter, maxValue}:CounterBlockPropsType) => {\r\n\r\n\r\n\r\n    return (\r\n        <p className={`${classes.text} ${counter === maxValue ? classes.error : ''}`}>{counter}</p>\r\n    )\r\n}\r\n\r\nexport default CounterBlock","import React from \"react\";\r\nimport CounterBlock from \"./Counter/CounterBlock\";\r\n\r\n\r\ntype NoerrorPropsType  = {\r\n    counter: number\r\n    maxValue: number\r\n}\r\n\r\nconst Noerror = ({counter, maxValue}: NoerrorPropsType) => {\r\n    return(\r\n        <div>\r\n            {counter === 0 ? <p className={'counter_entry-text'}>Enter values and press Set</p> : <CounterBlock counter={counter} maxValue={maxValue}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Noerror","import React from \"react\";\r\n\r\nconst Error = () => {\r\n    return(\r\n        <div className={'counter_entry-text'}>\r\n            <p className={'errorText'}>Incorrect value!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error","import React, {Dispatch, SetStateAction} from \"react\";\r\nimport classes from \"./Counter.module.css\";\r\nimport CounterBlock from \"./CounterBlock\";\r\nimport CounterButtons from \"./CounterButtons\";\r\nimport Noerror from \"../Noerror\";\r\nimport Error from \"../Error\";\r\n\r\ntype CounterPropsType = {\r\n    counter: number\r\n    incCounter: () => void\r\n    resetCounter: () => void\r\n    maxValue: number\r\n    startValue: number\r\n    error: boolean\r\n    setError: Dispatch<SetStateAction<boolean>>\r\n\r\n}\r\n\r\nconst Counter = ({counter, incCounter, resetCounter, maxValue, startValue, error, setError}: CounterPropsType) => {\r\n\r\n\r\n\r\n    return (\r\n        <div className={'counter'}>\r\n\r\n            {!error ? <Noerror counter={counter} maxValue={maxValue}/> : <Error/>}\r\n\r\n\r\n            <CounterButtons\r\n                incCounter={incCounter}\r\n                resetCounter={resetCounter}\r\n                counter={counter}\r\n                maxValue={maxValue}\r\n                error={error}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter","import React, {Dispatch, SetStateAction} from \"react\";\r\nimport {log} from \"util\";\r\nimport {on} from \"cluster\";\r\n\r\ntype ValueLinePropsType = {\r\n    name: string\r\n    getInputValue: (value : number) => void\r\n    setError: Dispatch<SetStateAction<boolean>>\r\n    error: boolean\r\n    value: number\r\n}\r\n\r\n\r\nconst ValueLine = ({name, getInputValue, setError, error, value}:ValueLinePropsType) => {\r\n\r\n    const onChangeHandler = (e: any) => {\r\n        const inputValue = +e.currentTarget.value\r\n        getInputValue(inputValue)\r\n        if ( inputValue < 0 ){\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className={'valueLine'}>\r\n            <p>{name}</p>\r\n            <input value={value} type=\"number\" onChange={ onChangeHandler} className={ error ? 'errorInput' : ''}/>\r\n        </div>\r\n    )\r\n}\r\nexport default ValueLine","import React, {Dispatch, SetStateAction} from \"react\";\r\nimport ValueLine from \"./ValueLine\";\r\n\r\ntype CounterValuesSetterPropsType = {\r\n    getStartInputValue: (value : number) => void\r\n    getMaxInputValue: (value : number) => void\r\n    setError: Dispatch<SetStateAction<boolean>>\r\n    error: boolean\r\n    maxValue: number\r\n    starValue: number\r\n}\r\n\r\nconst CounterValuesSetter = ({getStartInputValue, getMaxInputValue, setError, error, maxValue, starValue}:CounterValuesSetterPropsType) => {\r\n\r\n\r\n    return(\r\n        <div>\r\n            <ValueLine name={'max value'} getInputValue={getMaxInputValue} setError={setError} error={error} value={maxValue}/>\r\n            <ValueLine name={'start value'} getInputValue={getStartInputValue} setError={setError} error={error} value={starValue}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CounterValuesSetter","import React, {Dispatch, SetStateAction} from \"react\";\r\nimport CounterButtons from \"../Counter/CounterButtons\";\r\nimport CounterButton from \"../Counter/CounterButton\";\r\nimport CounterValuesSetter from \"./CounterValuesSetter\";\r\nimport classes from \"./CounterSetter.module.css\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\nimport {log} from \"util\";\r\n\r\n\r\ntype CounterSetterPropsType = {\r\n    setCounterValue: (value : number) => void\r\n    getStartInputValue: (value : number) => void\r\n    getMaxInputValue: (value : number) => void\r\n    maxValue: number\r\n    starValue: number\r\n    counter: number\r\n    error: boolean\r\n    setError: Dispatch<SetStateAction<boolean>>\r\n    disabled: boolean\r\n }\r\n\r\nconst CounterSetter = ({setCounterValue,getStartInputValue, maxValue, counter , getMaxInputValue, starValue, error, setError, disabled}: CounterSetterPropsType) => {\r\n\r\n\r\n\r\n    return(\r\n        <div className={'counter'}>\r\n            <CounterValuesSetter getStartInputValue={getStartInputValue} getMaxInputValue={getMaxInputValue} setError={setError} error={error} maxValue={maxValue} starValue={starValue}/>\r\n            <CounterButton name={'Set'} callback={()=>{setCounterValue(counter)}} disabled={ disabled }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CounterSetter","import React, {useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Counter from \"./Components/Counter/Counter\";\nimport CounterSetter from \"./Components/CounterSetter/CounterSetter\";\n\nfunction App() {\n\n\n    let [counter, setCounter] = React.useState(0)\n\n    let [maxValue, setMaxvalue] = React.useState(0)\n\n    let [startValue, setStartValue] = React.useState(0)\n\n    let [error, setError] = React.useState(false)\n\n    let [disabled, setDisabled] = React.useState(false)\n\n    useEffect( () => {\n        let valueAsString = localStorage.getItem('counterValue')\n        if ( valueAsString ){\n            let newValue = JSON.parse(valueAsString)\n            setCounter(newValue)\n        }\n    }, [] )\n\n    useEffect( () => {\n        localStorage.setItem('counterValue', JSON.stringify(counter))\n    }, [counter] )\n    //\n    useEffect( () => {\n        let startValueAsString = localStorage.getItem('startValue')\n        if ( startValueAsString ){\n            let newValue = JSON.parse(startValueAsString)\n            setStartValue(newValue)\n        }\n    }, [] )\n\n    useEffect( () => {\n        localStorage.setItem('startValue', JSON.stringify(startValue))\n    }, [startValue] )\n    //\n    useEffect( () => {\n        let maxValueAsString = localStorage.getItem('maxValue')\n        if ( maxValueAsString ){\n            let newValue = JSON.parse(maxValueAsString)\n            setMaxvalue(newValue)\n        }\n    }, [] )\n\n    useEffect( () => {\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n    },[maxValue] )\n\n\n    const getStartInputValue = (value : number) => {\n        setStartValue(value)\n        startValue = value\n        if (startValue < 0) {\n            setError(true)\n            setDisabled(true)\n        }\n        else if(startValue === maxValue){\n            setError(true)\n            setDisabled(true)\n        }\n        else if(startValue > maxValue){\n            setError(true)\n            setDisabled(true)\n        }\n        else{\n            setError(false)\n            setDisabled(false)\n        }\n\n    }\n\n    const getMaxInputValue = (value :number) => {\n        setMaxvalue(value)\n        maxValue = value\n\n        if (maxValue < 0) {\n            setError(true)\n            setDisabled(true)\n        }\n        else if( maxValue === startValue ){\n            setError(true)\n            setDisabled(true)\n        }\n        else if ( startValue > maxValue){\n            setError(true)\n            setDisabled(true)\n        }\n        else if ( startValue < 0 ){\n            setError(true)\n            setDisabled(true)\n        }\n        else {\n            setError(false)\n            setDisabled(false)\n        }\n    }\n\n    const setCounterValue = () => {\n        setCounter(startValue)\n        setDisabled(true)\n        if ( startValue === maxValue  ){\n            setError(true)\n        }\n        else if ( startValue > maxValue){\n            setError(true)\n        }\n        else if ( startValue < 0 ){\n            setError(true)\n        }\n        else {\n            setError(false)\n        }\n    }\n\n    const resetCounter = () => {\n        if (counter > 0 && counter <= maxValue){\n            setCounter(startValue)\n        }\n    }\n\n\n    const incCounter = () => {\n        if (counter < maxValue) {\n            setCounter(counter + 1)\n        }\n\n    }\n\n\n    return (\n        <div className=\"App\">\n\n\n            <CounterSetter\n                setCounterValue={setCounterValue}\n                getStartInputValue={getStartInputValue}\n                getMaxInputValue={getMaxInputValue}\n                maxValue={maxValue}\n                starValue={startValue}\n                counter={counter}\n                error={error}\n                setError={setError}\n                disabled={disabled}\n            />\n            <Counter\n                counter={counter}\n                incCounter={incCounter}\n                resetCounter={resetCounter}\n                maxValue={maxValue}\n                startValue={startValue}\n                error={error}\n                setError={setError}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}